module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;
	
	var _ImmutableStore = __webpack_require__(2);
	
	var _ImmutableStore2 = _interopRequireDefault(_ImmutableStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _ImmutableStore2.default;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _immutable = __webpack_require__(3);
	
	var _immutable2 = _interopRequireDefault(_immutable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Tiny observable wrapper around Immutable JS with rewind/replay support.
	 * Use normal Immutable JS methods to update the store.
	 * Subscribe to be notified of changes.
	 */
	
	var ImmutableStore = function () {
	  function ImmutableStore() {
	    var _this = this;
	
	    var initialData = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, ImmutableStore);
	
	    var initialState = _immutable2.default.fromJS(initialData);
	
	    this._history = [initialState];
	    this._historyIndex = 0;
	    this._subscribers = [];
	
	    // Setup proxy READ methods; these have no side effects.
	    IMMUTABLE_READ_METHODS.forEach(function (method) {
	      _this[method] = function () {
	        var state = _this.getState();
	
	        return state[method].apply(state, arguments);
	      };
	    });
	
	    // Setup proxy WRITE methods; these update the inner store and notify subscribers.
	    IMMUTABLE_WRITE_METHODS.forEach(function (method) {
	      _this[method] = function () {
	        var state = _this.getState();
	        var newState = state[method].apply(state, arguments);
	
	        // If we have stepped back to a previous state and an update is received-
	        // We should disregard the "newer" state.
	        if (_this._historyIndex < _this._history.length - 1) {
	          _this._history.splice(_this._historyIndex + 1);
	        }
	
	        _this._history.push(newState);
	        _this._historyIndex++;
	
	        if (state !== newState) {
	          _this._notifySubscribers();
	        }
	
	        return newState;
	      };
	    });
	  }
	
	  _createClass(ImmutableStore, [{
	    key: 'clearHistory',
	    value: function clearHistory() {
	      var state = this.getState();
	
	      this._history = [state];
	      this._historyIndex = 0;
	    }
	  }, {
	    key: 'getState',
	    value: function getState() {
	      return this._history[this._historyIndex];
	    }
	  }, {
	    key: 'hasNext',
	    value: function hasNext() {
	      return this._historyIndex < this._history.length - 1;
	    }
	  }, {
	    key: 'hasPrevious',
	    value: function hasPrevious() {
	      return this._historyIndex > 0;
	    }
	  }, {
	    key: 'jumpToEnd',
	    value: function jumpToEnd() {
	      return this._jumpTo(this._history.length - 1);
	    }
	  }, {
	    key: 'jumpToStart',
	    value: function jumpToStart() {
	      return this._jumpTo(0);
	    }
	  }, {
	    key: 'stepBack',
	    value: function stepBack() {
	      return this._jumpTo(this._historyIndex - 1);
	    }
	  }, {
	    key: 'stepForward',
	    value: function stepForward() {
	      return this._jumpTo(this._historyIndex + 1);
	    }
	
	    /**
	     * Subscribe to store changes.
	     * Subscribers will be passed a reference to the current store-state when updates are made.
	     * Stepping backwards or forward will notify subscribers of the updated "current" state.
	     */
	
	  }, {
	    key: 'subscribe',
	    value: function subscribe(subscriber) {
	      var _this2 = this;
	
	      this._subscribers.push(subscriber);
	
	      return function () {
	        return _this2._unsubscribe(subscriber);
	      };
	    }
	
	    /**
	     * Memoized subscription to a specific path in the Immutable store.
	     * Subscribers will be passed the value contained at the specified path within the current store-state.
	     */
	
	  }, {
	    key: 'subscribeIn',
	    value: function subscribeIn(path, subscriber) {
	      var cached = this.getIn(path);
	
	      return this.subscribe(function (state) {
	        var value = state.getIn(path);
	
	        if (cached !== value) {
	          cached = value;
	
	          subscriber(value);
	        }
	      });
	    }
	  }, {
	    key: '_jumpTo',
	    value: function _jumpTo(index) {
	      index = Math.min(Math.max(index, 0), this._history.length - 1);
	
	      if (this._historyIndex !== index) {
	        this._historyIndex = index;
	
	        this._notifySubscribers();
	
	        return this.getState();
	      }
	    }
	  }, {
	    key: '_notifySubscribers',
	    value: function _notifySubscribers() {
	      var state = this.getState();
	
	      // @TODO Should I catch Errors and do anything with them?
	      this._subscribers.forEach(function (subscribed) {
	        return subscribed(state);
	      });
	    }
	  }, {
	    key: '_unsubscribe',
	    value: function _unsubscribe(subscriber) {
	      this._subscribers = this._subscribers.filter(function (subscribed) {
	        return subscribed !== subscriber;
	      });
	    }
	  }]);
	
	  return ImmutableStore;
	}();
	
	// Immutable JS methods to proxy
	
	
	exports.default = ImmutableStore;
	var IMMUTABLE_WRITE_METHODS = ['delete', 'deleteIn', 'merge', 'mergeDeep', 'mergeDeepIn', 'mergeIn', 'remove', 'removeIn', 'set', 'setIn', 'update', 'updateIn'];
	var IMMUTABLE_READ_METHODS = ['get', 'getIn'];

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("immutable");

/***/ }
/******/ ]);
//# sourceMappingURL=immutable-js-store.js.map